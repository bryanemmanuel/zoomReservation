@model zoomrs.Models.ViewModels.AppointmentVM

<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="IE=8">
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">

	<title>Cancel</title>

	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Ubuntu">
	<link rel="stylesheet" href="http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
	@* 	<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css" rel="stylesheet" /> *@
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js"></script>


	<!-- Core theme CSS (includes Bootstrap)-->
	<link href="~/css/styles.css" rel="stylesheet" />
	<link rel="stylesheet" href="~/vendor/libs/animate-css/animate.css">
	<link href="~/vendor/libs/fullcalendar/fullcalendar.css" rel="stylesheet" />
	<link href="~/vendor/libs/flatpickr/flatpickr.css" rel="stylesheet" />
	<link href="~/vendor/libs/select2/select2.css" rel="stylesheet" />
	<link href="~/vendor/libs/quill/editor.css" rel="stylesheet" />
	<link href="~/vendor/libs/form-validation/umd/styles/index.min.css" rel="stylesheet" />
	<link href="~/vendor/css/pages/app-calendar.css" rel="stylesheet" />


</head>
<body>
	<main class="flex-shrink-0">
		<!-- Navigation-->
		<nav class="navbar navbar-expand-lg bg-gradient-primary-to-secondary py-2">
			<div class="container  d-flex justify-content-center">
				<a class="" href=""> <img class="profile-img" src="~/assets/logomin.webp" width="220px" alt="calamba logo" /></a>


			</div>
		</nav>

		@* <div class="card form-control mt-2">
			<h1></h1>
			<form >

				<!-- Display appointment details -->
				<h5>Name: </h5>
				<h5>Department: </h5>

				<h5>Schedule of Appointment</h5>

				

				<label for="reason">Reason for Cancel</label>
				<br />
				

			</form>




		</div>
 *@

		<div class="card">
			
			<div class="card-body">
				<div class="d-flex align-items-center justify-content-center ">
					<form method="Post" asp-action="Cancelling"  class="w-px-800 border rounded p-3 p-md-5">
						<h3 class="mb-4">Cancel Appointment</h3>

						<div class="row mb-3">
							<div class="col-12">
								<label class="col-sm-3 col-form-label" for="Department">Name:</label>
								<div class="col-12">
									<input type="text" id="form-alignment-username" class="form-control" value="@Model.Appointment.FirstName  @Model.Appointment.LastName" disabled />
								</div>
							</div>

						</div>


						<div class="row mb-3">
							<div class="col-12">
								<label class="col-sm-3 col-form-label" for="Department">Department</label>
								<div class="col-12">
									<input type="text" id="form-alignment-username" class="form-control" value="@Model.Appointment.Department.DepartmentName" disabled />
								</div>
							</div>

						</div>

						<div class="divider">
							<div class="divider-text">
								<h6>

									Reserved Date
								</h6>
							</div>
						</div>






					

							@foreach (var item in Model.ScheduleData)
							{

								<div class="col-12">
									<label class="col-sm-3 col-form-label" for="dandt">Date </label>
									<div class="col-12">
										<input type="text"  class="form-control " value="@item.date.ToString("MMMM dd, yyyy") ( @item.date.ToString("dddd") )" disabled />
									</div>
								</div>


							<label class="col-sm-3 col-form-label" for="dandt">Time</label>
								// Assuming val represents the maximum time value
								int val = item.time;
								int count = item.count;

								<input class="form-control" type="hidden" value="@item.Id" name="schedID" />
								int count2 = 0;
								List<string> getTimes = new List<string>(); // Using List<string> instead of string[]

								for (int i = 256; i >= 1; i = i / 2)
								{
									if (i < val && count2 < count)
									{
										switch (i)
										{
											case 1:
												getTimes.Add("8:00AM-9:00AM");
												break;
											case 2:
												getTimes.Add("9:00AM-10:00AM");
												break;
											case 4:
												getTimes.Add("10:00AM-11:00AM");
												break;
											case 8:
												getTimes.Add("11:00AM-12:00PM");
												break;
											case 16:
												getTimes.Add("12:00PM-1:00PM");
												break;
											case 32:
												getTimes.Add("1:00PM-2:00PM");
												break;
											case 64:
												getTimes.Add("2:00PM-3:00PM");
												break;
											case 128:
												getTimes.Add("3:00PM-4:00PM");
												break;
											case 256:
												getTimes.Add("4:00PM-5:00PM");
												break;
											default:
												break;
										}
										count2++;
									}
								}

							<div class="row">
								@for (int i = getTimes.Count - 1; i >= 0; i--)
								{



									<div class="col-3 badge bg-label-success pt-2 pb-2  mx-2">@getTimes[i]</div>
								
									

								

									
								}
								</div>
							}


						<input class="form-control" type="hidden" value="@Model.Appointment.Id" name="appId" />














						<div class="divider">
							<div class="divider-text">
								<h6>

									Reason for Cancel
								</h6>
							</div>
						</div>


						<textarea class="form-control" asp-for="Appointment.Cancelled" id="reason" value="" required></textarea>

						<div class="row mb-3">
							<div class="col-6">
								<label class="col-sm-3 col-form-label" for="Department">Department</label>
								<div class="col-12">
									<input type="text" id="form-alignment-username" class="form-control" placeholder="john.doe" />
								</div>
							</div>
							<div class="col-6">
								<label class="col-sm-3 col-form-label" for="Department">Department</label>
								<div class="col-12">
									<input type="text" id="form-alignment-username" class="form-control" placeholder="john.doe" />
								</div>
							</div>
						</div>


						<div class="row mb-3">
							<label class="col-sm-3 col-form-label" for="form-alignment-username">Username</label>
							<div class="col-sm-9">
								<input type="text" id="form-alignment-username" class="form-control" placeholder="john.doe" />
							</div>
						</div>



						<div class="d-grid">
						
							<button type="submit" class="btn btn-danger">Cancel Appointment</button>
						</div>
					</form>


				</div>
			</div>
		</div>






		<!-- About Section-->
		<section class="bg-light py-5">
			<div class="container px-5">
				<div class="row gx-5 justify-content-center">
					<div class="col-xxl-8">
						<div class="text-center my-5">
							<h2 class="display-5 fw-bolder"><span class="text-gradient d-inline">About Zoomers</span></h2>
							<p class="lead fw-light mb-4">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit dolo</p>
							<p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit dolorum itaque qui unde quisquam consequatur autem. Eveniet quasi nobis aliquid cumque officiis sed rem iure ipsa! Praesentium ratione atque dolorem?</p>
							<!-- <div class="d-flex justify-content-center fs-2 gap-4">
								<a class="text-gradient" href="#!"><i class="bi bi-twitter"></i></a>
								<a class="text-gradient" href="#!"><i class="bi bi-linkedin"></i></a>
								<a class="text-gradient" href="#!"><i class="bi bi-github"></i></a>
							</div> -->
						</div>
					</div>
				</div>
			</div>
		</section>
	</main>
	<!-- Footer-->
	<footer class="bg-white py-4 mt-auto">
		<div class="container px-5">
			<div class="row align-items-center justify-content-between flex-column flex-sm-row">
				<div class="col-auto"><div class="small m-0">Copyright &copy;Zoomers 2024</div></div>
				<div class="col-auto">
					<!-- <a class="small" href="#!">Privacy</a>
					<span class="mx-1">&middot;</span>
					<a class="small" href="#!">Terms</a>
					<span class="mx-1">&middot;</span>
					<a class="small" href="#!">Contact</a> -->
				</div>
			</div>
		</div>
	</footer>

	@{
		// Get the list of disabled dates from ViewData
		var disabledDates = ViewData["DisableDate"] as List<string>;
		// Serialize the list of disabled dates to JSON
		var disabledDatesJson = Newtonsoft.Json.JsonConvert.SerializeObject(disabledDates);
	}
	<script>
		$(document).ready(function () {

			$("#reason").val("");
			var disableDate = @Html.Raw(Json.Serialize(ViewData["DisableDate"]));

			var disabledDates = @Html.Raw(disabledDatesJson);

			disableDate = disableDate.map(function (dateString) {
				var utcDate = new Date(dateString + "T00:00:00Z"); // Assume dates are in UTC
				var localDate = new Date(utcDate.getTime() + utcDate.getTimezoneOffset() * 60000); // Convert to local timezone
				return localDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD
			});

			flatpickr("#selectedDate", {
				dateFormat: "Y-m-d",
				minDate: "today",
				locale: "fil", // Set the locale to Filipino
				time_24hr: true,
				disable: [
					disabledDates, // Pass disableDate array as the first element
					function (date) {
						// Disable weekends (Saturday and Sunday)
						if (date.getDay() === 0 || date.getDay() === 6) {
							return true;
						}
						var isoDate = date.toISOString().split('T')[0];
						return disableDate.includes(isoDate);
					}

				]

			});
		});


	</script>
	<script>

		$(document).ready(function () {

			$('#appointmentForm').submit(function (event) {
				event.preventDefault();

				// Get selected time slots
				var selectedTimeSlots = $('#TimeSlots').val();
				console.log($('#TimeSlots').val().length);

				$('#selectedTimeSlots').val(selectedTimeSlots.join(','));

				var selectedDate = $('#selectedDate').val();
				console.log($('#selectedDate').val());


				if (!selectedDate) {
					$('#valdate').text('Please select a date.');

					return false; // prevent form submission
				}


				if ($('#TimeSlots').val().length == 0) {

					$('#valtime').text('Please select at least one time slot.');
					return false; // prevent form submission
				}
				else {
					$('#valtime').text('');
				}
				// Set the selected time slots to the hidden input field

				// Check for empty time slots


				// Check for empty textboxes
				var isTextBoxEmpty = false;
				$('input[type="text"]').each(function () {
					if ($(this).val().trim() === '') {
						isTextBoxEmpty = true;
						return false; // exit the loop early if an empty textbox is found
					}
				});

				if (isTextBoxEmpty) {

					return false; // prevent form submission
				}

				// Check for empty date


				// Proceed with form submission if all validations pass
				this.submit()

			});
		});
	</script>

	<script>
		$(document).ready(function () {
			$("#selectedDate").change(function () {
				var selectedDate = $(this).val();
				console.log(selectedDate);
				$('#showTime').css('display', 'block');
				$('.multiselect-dropdown').css('width', '100%');
				$.ajax({
					url: '@Url.Action("GetAvailableTimeSlots", "Appointment")',
					type: 'GET',
					dataType: 'json',
					data: { selectedDate: selectedDate },
					success: function (availableTimeSlots) {
						// Clear previous options
						$('#TimeSlots').empty();
						console.log(availableTimeSlots);
						// Populate options with available time slots
						for (var i = 0; i < availableTimeSlots.length; i++) {
							var item = availableTimeSlots[i];

							// Check if item.text is defined and not empty
							if (item && typeof item.text === 'string' && item.text.trim() !== '') {
								console.log(item.text); // Log the text of each available time slot

								// Create a new <option> element
								var option = $('<option>', {
									value: item.value,
									text: item.text
								});

								// Check if the option should be disabled
								if (item.disabled) {
									option.prop('disabled', true);
								}

								// Append the option to the <select> element with id #TimeSlots
								$('#TimeSlots').append(option);
							} else {
								console.log("Text is undefined or empty for item: ", item);
							}
						}
					},
					error: function (xhr, status, error) {
						console.log("Error fetching time slots: " + error);
					}
				});
			});

		});




	</script>
	<script>

		$(".js-select2").select2({
			closeOnSelect: false,
			placeholder: "Placeholder",
			allowHtml: true,
			allowClear: true,
			tags: true // создает новые опции на лету
		});

		$('.icons_select2').select2({
			width: "100%",
			templateSelection: iformat,
			templateResult: iformat,
			allowHtml: true,
			placeholder: "Placeholder",
			dropdownParent: $('.select-icon'),//обавили класс
			allowClear: true,
			multiple: false
		});


		function iformat(icon, badge,) {
			var originalOption = icon.element;
			var originalOptionBadge = $(originalOption).data('badge');

			return $('<span><i class="fa ' + $(originalOption).data('icon') + '"></i> ' + icon.text + '<span class="badge">' + originalOptionBadge + '</span></span>');
		}

	</script>
	@section Scripts
		{
		<partial name="_validationScriptsPartial" />
	}
</body>
</html>